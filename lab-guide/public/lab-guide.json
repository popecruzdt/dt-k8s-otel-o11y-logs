[{"id":"1","name":"Prerequisites","content":"<h2 id=\"prerequisites\">Prerequisites</h2>\n<h3 id=\"whatyoulllearntoday\">What You’ll Learn Today</h3>\n<p>In this lab we'll utilize the OpenTelemetry Collector deployed as a DaemonSet (Node Agent) to collect pod/container logs from a Kubernetes cluster and ship them to Dynatrace.  Additionally, we'll deploy the OpenTelemetry Collector as a Deployment (Gateway) to watch Kubernetes Events from the Cluster and ship them to Dynatrace.</p>\n<p>Lab tasks:</p>\n<ol>\n<li>Deploy OpenTelemetry Collector as a DaemonSet</li>\n<li>Deploy OpenTelemetry Collector as a Deployment</li>\n<li>Configure OpenTelemetry Collector service pipeline for log enrichment</li>\n<li>Query and visualize logs in Dynatrace using DQL</li>\n</ol>\n<p><img src=\"assets/01-astronomy-shop_logs.png\" alt=\"astronomy-shop logs\" /></p>","activityList":[{"id":"1.1","name":"Codespaces Cluster Set Up","content":"<h2 id=\"codespacesclustersetup\">Codespaces Cluster Set Up</h2>\n<p>Create a new instance or use an existing instance of the <code>dt-k8s-otel-o11y-cluster</code> Codespaces.</p>\n<p><a href=\"https://github.com/popecruzdt/dt-k8s-otel-o11y-cluster/tree/code-spaces\">dt-k8s-otel-o11y-cluster</a></p>\n<p>Navigate to the Github repository.  Click on <code>Code</code>.  Click on <code>Codespaces</code>.  Click on <code>New with options</code>.</p>\n<p><img src=\"assets/01-github_cluster_repo.png\" alt=\"github cluster repo\" /></p>\n<p>Choose the Branch <code>code-spaces</code>.  Choose the Dev Container Configuration <code>Kubernetes in Codespaces</code>.</p>\n<p>Choose a Region near your Dynatrace tenant.</p>\n<p>Choose Machine Type <code>2-core</code>.</p>\n<p><img src=\"assets/01-github_cluster_new_codespaces.png\" alt=\"github new codespaces\" /></p>\n<p>Allow the Codespace instance to fully initialize.  It is not ready yet.</p>\n<p><img src=\"assets/01-github_codespace_launch.png\" alt=\"github codespace launch\" /></p>\n<p>The Codespace instance will run the post initialization scripts.</p>\n<p><img src=\"assets/01-github_codespace_create.png\" alt=\"github codespace \" /></p>\n<p>When the Codespace instance is idle, validate the <code>astronomy-shop</code> pods are running.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n astronomy-shop\n</code></pre>\n<p><img src=\"assets/01-github_codespace_ready.png\" alt=\"github codespace ready\" /></p>","activityList":[]},{"id":"1.2","name":"Generate Dynatrace Access Token","content":"<h2 id=\"generatedynatraceaccesstoken\">Generate Dynatrace Access Token</h2>\n<p>Generate a new API access token with the following scopes:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">Ingest events\nIngest logs\nIngest metrics\nIngest OpenTelemetry traces</span>\n</code></pre>\n<p><a href=\"https://docs.dynatrace.com/docs/dynatrace-api/basics/dynatrace-api-authentication#create-token\">See Related Dynatrace API Token Creation Documentation</a></p>\n<p><img src=\"assets/01-dt_access_token.png\" alt=\"dt access token\" /></p>","activityList":[]},{"id":"1.3","name":"Import Notebook into Dynatrace","content":"<h2 id=\"importnotebookintodynatrace\">Import Notebook into Dynatrace</h2>\n<p><a href=\"https://github.com/popecruzdt/dt-k8s-otel-o11y-logs/blob/code-spaces/dt-k8s-otel-o11y-logs_dt_notebook.json\">Notebook</a></p>","activityList":[]},{"id":"1.4","name":"Environment Prep","content":"<h2 id=\"environmentprep\">Environment Prep</h2>\n<h3 id=\"defineworkshopuservariables\">Define workshop user variables</h3>\n<p>In your Github Codespaces Terminal:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attr\">DT_ENDPOINT</span>=https://{your-environment-id}.live.dynatrace.com/api/v2/otlp\n<span class=\"hljs-attr\">DT_API_TOKEN</span>={your-api-token}\n<span class=\"hljs-attr\">NAME</span>=&lt;INITIALS&gt;-k8s-otel-o11y\n</code></pre>\n<h3 id=\"clonethecodespacesbranchtoyourcodespacesinstance\">Clone the <code>code-spaces</code> branch to your Codespaces instance</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">git <span class=\"hljs-built_in\">clone</span> --single-branch --branch code-spaces https://github.com/popecruzdt/dt-k8s-otel-o11y-logs.git\n</code></pre>\n<h3 id=\"moveintothebasedirectory\">Move into the base directory</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\"><span class=\"hljs-built_in\">cd</span> dt-k8s-otel-o11y-logs\n</code></pre>","activityList":[]}]},{"id":"2","name":"OpenTelemetry Collector for Logs","content":"<h2 id=\"opentelemetrycollectorforlogs\">OpenTelemetry Collector for Logs</h2>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment</p>","activityList":[{"id":"2.1","name":"Deploy OpenTelemetry Operator","content":"<h2 id=\"deployopentelemetryoperator\">Deploy OpenTelemetry Operator</h2>\n<h3 id=\"createdynatracenamespace\">Create <code>dynatrace</code> namespace</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl create namespace dynatrace\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>namespace/dynatrace created</p>\n</blockquote>\n<h3 id=\"createdynatraceotelcoldtapicredentialssecret\">Create <code>dynatrace-otelcol-dt-api-credentials</code> secret</h3>\n<p>The secret holds the API endpoint and API token that OpenTelemetry data will be sent to.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl create secret generic dynatrace-otelcol-dt-api-credentials --from-literal=DT_ENDPOINT=<span class=\"hljs-variable\">$DT_ENDPOINT</span> --from-literal=DT_API_TOKEN=<span class=\"hljs-variable\">$DT_API_TOKEN</span> -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>secret/dynatrace-otelcol-dt-api-credentials created</p>\n</blockquote>\n<h3 id=\"deploycertmanagerprerequisiteforopentelemetryoperator\">Deploy <code>cert-manager</code>, pre-requisite for <code>opentelemetry-operator</code></h3>\n<p>https://cert-manager.io/docs/installation/</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/cert-manager.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>namespace/cert-manager created\\\n  customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created\\\n  customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created\\\n  …\\\n  validatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created</p>\n</blockquote>\n<p>Wait 30-60 seconds for cert-manager to finish initializing before continuing.</p>\n<h3 id=\"deployopentelemetryoperator-1\">Deploy <code>opentelemetry-operator</code></h3>\n<p>The OpenTelemetry Operator will deploy and manage the custom resource <code>OpenTelemetryCollector</code> deployed on the cluster.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/opentelemetry-operator.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>namespace/opentelemetry-operator-system created\\\n  customresourcedefinition.apiextensions.k8s.io/instrumentations.opentelemetry.io created\\\n  customresourcedefinition.apiextensions.k8s.io/opampbridges.opentelemetry.io created\\\n  …\\\n  validatingwebhookconfiguration.admissionregistration.k8s.io/opentelemetry-operator-validating-webhook-configuration configured</p>\n</blockquote>","activityList":[]},{"id":"2.2","name":"Deploy OpenTelemetry Collector","content":"<h2 id=\"deployopentelemetrycollector\">Deploy OpenTelemetry Collector</h2>\n<h3 id=\"dynatracedistrodaemonsetnodeagent\">Dynatrace Distro - Daemonset (Node Agent)</h3>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment#tabgroup--dynatrace-docs--agent</p>\n<p>Pod (and container) logs are written to the filesystem of the Node where the pod is running.  Therefore the Collector must be deployed as a Daemonset to read the log files on the local Node.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-logs</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;daemonset&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;ghcr.io/dynatrace/dynatrace-otel-collector/dynatrace-otel-collector:latest&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/logs/otel-collector-logs-crd-01.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-logs created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-logs-collector-8q8tz</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"filelogreceiver\"><code>filelog</code> receiver</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#filelog-receiver</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">config:</span> <span class=\"hljs-string\">|\n    receivers:\n      filelog:\n        ...\n    service:\n      pipelines:\n        logs:\n          receivers: [filelog]\n          processors: [batch]\n          exporters: [otlphttp/dynatrace]\n</span></code></pre>\n<h3 id=\"querylogsindynatrace\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> isNotNull(log.file.path) <span class=\"hljs-keyword\">and</span> isNotNull(log)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">100</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, loglevel, status, k8s.namespace.name, k8s.pod.name, k8s.container.name, content, log.file.path\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/02-dql_filelog_receiver.png\" alt=\"dql_filelog_receiver\" /></p>","activityList":[]},{"id":"2.3","name":"k8sattributes Processor","content":"<h2 id=\"k8sattributesprocessor\">k8sattributes Processor</h2>\n<h3 id=\"createclusterrolewithreadaccesstokubernetesobjects\">Create <code>clusterrole</code> with read access to Kubernetes objects</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-logs</span>\n<span class=\"hljs-attr\">rules:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;pods&quot;</span>, <span class=\"hljs-string\">&quot;namespaces&quot;</span>, <span class=\"hljs-string\">&quot;nodes&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>]\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;apps&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;replicasets&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>]\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;extensions&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;replicasets&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>]\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-logs.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrole.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-logs created</p>\n</blockquote>\n<h3 id=\"createclusterrolebindingforopentelemetrycollectorserviceaccount\">Create <code>clusterrolebinding</code> for OpenTelemetry Collector service account</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRoleBinding</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-logs-crb</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-logs-collector</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-logs</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-logs-crb.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrolebinding.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-logs-crb created</p>\n</blockquote>\n<h3 id=\"addk8sattributesprocessor\">Add <code>k8sattributes</code> processor</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-attributes-processor</p>\n<p>The <code>k8sattributes</code> processor will query metadata from the cluster about the k8s objects.  The Collector will then marry this metadata to the telemetry.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">k8sattributes:</span>\n    <span class=\"hljs-attr\">auth_type:</span> <span class=\"hljs-string\">&quot;serviceAccount&quot;</span>\n    <span class=\"hljs-attr\">passthrough:</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-attr\">filter:</span>\n        <span class=\"hljs-attr\">node_from_env_var:</span> <span class=\"hljs-string\">KUBE_NODE_NAME</span>\n    <span class=\"hljs-attr\">extract:</span>\n        <span class=\"hljs-attr\">metadata:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.namespace.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.deployment.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.daemonset.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.job.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.cronjob.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.replicaset.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.statefulset.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.pod.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.pod.uid</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.node.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.container.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.id</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.image.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.image.tag</span>\n        <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">tag_name:</span> <span class=\"hljs-string\">app.label.component</span>\n            <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">app.kubernetes.io/component</span>\n            <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">pod</span>\n    <span class=\"hljs-attr\">pod_association:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.uid</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.ip</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">connection</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/logs/otel-collector-logs-crd-02.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-logs configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-logs-collector-dns4x</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"querylogsindynatrace\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> k8s.namespace.name <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> &quot;astronomy-shop&quot; <span class=\"hljs-keyword\">and</span> isNotNull(k8s.deployment.name)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">100</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, loglevel, status, k8s.namespace.name, k8s.deployment.name, k8s.pod.name, k8s.container.name, app.label.component, content\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/02-dql_k8sattributes_processor.png\" alt=\"dql_k8sattributes_processor\" /></p>","activityList":[]},{"id":"2.4","name":"resourcedetection Processor","content":"<h2 id=\"resourcedetectionprocessor\">resourcedetection Processor</h2>\n<h3 id=\"addresourcedetectionprocessor\">Add <code>resourcedetection</code> processor</h3>\n<p>https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md#gcp-metadata</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">processors:</span>\n  <span class=\"hljs-attr\">resourcedetection/gcp:</span>\n    <span class=\"hljs-attr\">detectors:</span> [<span class=\"hljs-string\">env</span>, <span class=\"hljs-string\">gcp</span>]\n    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">2s</span>\n    <span class=\"hljs-attr\">override:</span> <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p><strong>note:</strong> for this lab, the Kind cluster does not have cloud metadata to collect.  These values will be spoofed for the purposes of this lab.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">resource/kind:</span>\n  <span class=\"hljs-attr\">attributes:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">cloud.account.id</span>\n    <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">dt-k8s-o11y-account</span>\n    <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">k8s.cluster.name</span>\n    <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">dt-k8s-o11y-kind</span>\n    <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/logs/otel-collector-logs-crd-03.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-logs configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-logs-collector-fbtk5</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"querylogsindynatrace\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> isNotNull(cloud.account.id) <span class=\"hljs-keyword\">and</span> isNotNull(k8s.cluster.name)\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> k8s.namespace.name <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> &quot;astronomy-shop&quot; <span class=\"hljs-keyword\">and</span> isNotNull(k8s.deployment.name)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">100</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, loglevel, status, cloud.account.id, k8s.cluster.name, k8s.namespace.name, k8s.deployment.name, content\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/02-dql_resourcedetection_processor.png\" alt=\"dql_resourcedetection_processor\" /></p>","activityList":[]},{"id":"2.5","name":"resource Processor","content":"<h2 id=\"resourceprocessor\">resource Processor</h2>\n<h3 id=\"addresourceprocessorattributes\">Add <code>resource</code> processor (attributes)</h3>\n<p>https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourceprocessor</p>\n<p>The <code>resource</code> processor allows us to directly add, remove, or change resource attributes on the telemetry.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">processors:</span>\n    <span class=\"hljs-attr\">resource:</span>\n        <span class=\"hljs-attr\">attributes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">k8s.pod.ip</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">delete</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">telemetry.sdk.name</span>\n          <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">opentelemetry</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">dynatrace.otel.collector</span>\n          <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">dynatrace-logs</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">dt.security_context</span>\n          <span class=\"hljs-attr\">from_attribute:</span> <span class=\"hljs-string\">k8s.cluster.name</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/logs/otel-collector-logs-crd-04.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-logs configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-logs-collector-xx6km</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"querylogsindynatrace\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> isNotNull(dt.security_context)\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> isNotNull(cloud.account.id) <span class=\"hljs-keyword\">and</span> isNotNull(k8s.cluster.name)\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> k8s.namespace.name <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> &quot;astronomy-shop&quot; <span class=\"hljs-keyword\">and</span> isNotNull(k8s.deployment.name)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">100</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, loglevel, status, dt.security_context, dynatrace.otel.collector, cloud.account.id, k8s.cluster.name, k8s.namespace.name, k8s.deployment.name, content\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/02-dql_resource_processor.png\" alt=\"dql_resource_processor\" /></p>","activityList":[]},{"id":"2.6","name":"Export to OTLP Receiver","content":"<h2 id=\"exporttootlpreceiver\">Export to OTLP Receiver</h2>\n<h3 id=\"otlpreceiver\"><code>otlp</code> receiver</h3>\n<p>https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver/otlpreceiver</p>\n<p>Adding the <code>otlp</code> receiver allows us to receive telemetry from otel exporters, such as agents and other collectors.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">config:</span> <span class=\"hljs-string\">|\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n    service:\n      pipelines:\n        logs:\n          receivers: [otlp]\n          processors: [batch]\n          exporters: [otlphttp/dynatrace]\n</span></code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/logs/otel-collector-logs-crd-05.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-logs configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-logs-collector-gu0rm</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"customizeastronomyshophelmvalues\">Customize astronomy-shop helm values</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">default:</span>\n  <span class=\"hljs-comment\"># List of environment variables applied to all components</span>\n  <span class=\"hljs-attr\">env:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_SERVICE_NAME</span>\n      <span class=\"hljs-attr\">valueFrom:</span>\n        <span class=\"hljs-attr\">fieldRef:</span>\n          <span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n          <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">&quot;metadata.labels[&#x27;app.kubernetes.io/component&#x27;]&quot;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_COLLECTOR_NAME</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&#x27;<span class=\"hljs-template-variable\">{{ include &quot;otel-demo.name&quot; . }}</span>-otelcol&#x27;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">cumulative</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_RESOURCE_ATTRIBUTES</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&#x27;service.name=$(OTEL_SERVICE_NAME),service.namespace=NAME_TO_REPLACE,service.version=<span class=\"hljs-template-variable\">{{ .Chart.AppVersion }}</span>&#x27;</span>\n</code></pre>\n<blockquote>\n  <p>service.namespace=NAME<em>TO</em>REPLACE\\\n  service.namespace=INITIALS-k8s-otel-o11y</p>\n</blockquote>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">sed -i <span class=\"hljs-string\">&quot;s,NAME_TO_REPLACE,<span class=\"hljs-variable\">$NAME</span>,&quot;</span> astronomy-shop/collector-values.yaml\n</code></pre>\n<h3 id=\"updateastronomyshopopentelemetrycollectorexportendpointviahelm\">Update <code>astronomy-shop</code> OpenTelemetry Collector export endpoint via helm</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">helm upgrade astronomy-shop open-telemetry/opentelemetry-demo --values astronomy-shop/collector-values.yaml --namespace astronomy-shop --version <span class=\"hljs-string\">&quot;0.31.0&quot;</span>\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>NAME: astronomy-shop\\\n  LAST DEPLOYED: Thu Jun 27 20:58:38 2024\\\n  NAMESPACE: astronomy-shop\\\n  STATUS: deployed\\\n  REVISION: 2</p>\n</blockquote>\n<h3 id=\"querylogsindynatrace\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> k8s.namespace.name <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> &quot;astronomy-shop&quot; <span class=\"hljs-keyword\">and</span> isNotNull(service.name)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">100</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, content, k8s.cluster.name, k8s.pod.name, service.namespace, service.name, telemetry.sdk.language, otel.scope.name\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/02-dql_otel_sdk_logs.png\" alt=\"dql_otel_sdk_logs\" /></p>","activityList":[]}]},{"id":"3","name":"OpenTelemetry Collector for Events","content":"<h2 id=\"opentelemetrycollectorforevents\">OpenTelemetry Collector for Events</h2>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment</p>","activityList":[{"id":"3.1","name":"Deploy OpenTelemetry Collector","content":"<h2 id=\"deployopentelemetrycollector\">Deploy OpenTelemetry Collector</h2>\n<h3 id=\"createclusterrolewithreadaccesstokubernetesevents\">Create <code>clusterrole</code> with read access to Kubernetes events</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-events</span>\n<span class=\"hljs-attr\">rules:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;events&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>]\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-events.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrole.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-events created</p>\n</blockquote>\n<h3 id=\"createclusterrolebindingforopentelemetrycollectorserviceaccount\">Create <code>clusterrolebinding</code> for OpenTelemetry Collector service account</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRoleBinding</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-events-crb</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-events-collector</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-events</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-events-crb.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrolebinding.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-events-crb created</p>\n</blockquote>\n<h3 id=\"addk8sobjectsreceivertocollectkuberneteseventsaslogs\">Add <code>k8sobjects</code> receiver to collect Kubernetes events as logs</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-objects-receiver</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">receivers:</span>\n  <span class=\"hljs-attr\">k8sobjects/events:</span>\n    <span class=\"hljs-attr\">auth_type:</span> <span class=\"hljs-string\">serviceAccount</span>\n    <span class=\"hljs-attr\">objects:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">events</span>\n        <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">watch</span>\n        <span class=\"hljs-attr\">namespaces:</span> [<span class=\"hljs-string\">astronomy-shop</span>,<span class=\"hljs-string\">dynatrace</span>]\n</code></pre>\n<p>The <code>k8sobjects</code> receiver is only available on the Contrib Distro of the OpenTelemetry Collector.  Therefore we must deploy a new Collector using the <code>contrib</code> image.</p>\n<h3 id=\"deployopentelemetrycollectorcontribdistrodeploymentgateway\">Deploy OpenTelemetry Collector - Contrib Distro - Deployment (Gateway)</h3>\n<p>https://github.com/open-telemetry/opentelemetry-operator</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-events</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;deployment&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;otel/opentelemetry-collector-contrib:0.103.0&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/events/otel-collector-events-crd-01.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-events created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-events-collector-559d5b9d77-rb26d</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>","activityList":[]},{"id":"3.2","name":"Generate Events","content":"<h2 id=\"generateevents\">Generate Events</h2>\n<h3 id=\"generateeventsusingdeploymentscalecommand\">Generate events using deployment scale command</h3>\n<p>https://kubernetes.io/docs/reference/kubectl/generated/kubectl_scale/</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl scale deployment astronomy-shop-imageprovider -n astronomy-shop --replicas=2\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>deployment.apps/astronomy-shop-imageprovider scaled</p>\n</blockquote>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl scale deployment astronomy-shop-imageprovider -n astronomy-shop --replicas=1\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>deployment.apps/astronomy-shop-imageprovider scaled</p>\n</blockquote>\n<h3 id=\"querylogsindynatrace\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\">fetch logs\n| filter dynatrace.otel.collector == &quot;dynatrace-events&quot; and event.domain == &quot;k8s&quot; and k8s.resource.name == &quot;events&quot;\n| filter object.metadata.namespace == &quot;astronomy-shop&quot;\n| sort timestamp desc\n| limit 100\n| fields timestamp, k8s.cluster.name, {object.metadata.namespace, alias: k8s.namespace.name}, object.message, object.reason, event.name\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/03-dql_k8s_events.png\" alt=\"dql_k8s_events\" /></p>","activityList":[]}]},{"id":"4","name":"Wrap Up","content":"<h2 id=\"wrapup\">Wrap Up</h2>\n<h3 id=\"whatyoulearnedtoday\">What You Learned Today</h3>\n<p>By completing this lab, you've successfully deployed the OpenTelemetry Collector to collect logs, enrich log attributes for better context, and ship those logs to Dynatrace for analysis.</p>\n<ul>\n<li>The OpenTelemetry Collector was deployed as a DaemonSet, behaving as an Agent running on each Node</li>\n<li>The Dynatrace Distro of OpenTelemetry Collector includes supported modules needed to ship logs to Dynatrace<ul>\n<li>The <code>filelog</code> receiver scrapes logs from the Node filesystem and parses the contents</li>\n<li>The <code>k8sattributes</code> processor enriches the logs with Kubernetes attributes</li>\n<li>The <code>resourcedetection</code> processor enriches the logs with cloud and cluster attributes</li>\n<li>The <code>resource</code> processor enriches the logs with custom (resource) attributes</li></ul></li>\n<li>The Community Contrib Distro of OpenTelemetry Collector includes modules needed to ship events to Dynatrace<ul>\n<li>The <code>k8sobjects</code> receiver watches for Kubernetes events (and other resources) on the cluster</li></ul></li>\n<li>Dynatrace DQL (via Notebooks) allows you to perform powerful queries and analysis of the log data</li>\n</ul>","activityList":[]}]